///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace PMI_MerchandisingPanel.TestCases.ReportGeneration
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The GenerateReport recording.
    /// </summary>
    [TestModule("a3353df1-f012-4a1c-9f1e-f44747ab59d2", ModuleType.Recording, 1)]
    public partial class GenerateReport : ITestModule
    {
        /// <summary>
        /// Holds an instance of the PMI_MerchandisingPanel.PMI_MerchandisingPanelRepository repository.
        /// </summary>
        public static PMI_MerchandisingPanel.PMI_MerchandisingPanelRepository repo = PMI_MerchandisingPanel.PMI_MerchandisingPanelRepository.Instance;

        static GenerateReport instance = new GenerateReport();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public GenerateReport()
        {
            varStartDate = "";
            varEndDate = "";
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static GenerateReport Instance
        {
            get { return instance; }
        }

#region Variables

        string _varStartDate;

        /// <summary>
        /// Gets or sets the value of variable varStartDate.
        /// </summary>
        [TestVariable("3fb28844-02f2-45a5-9963-f6cf4edac6ff")]
        public string varStartDate
        {
            get { return _varStartDate; }
            set { _varStartDate = value; }
        }

        string _varEndDate;

        /// <summary>
        /// Gets or sets the value of variable varEndDate.
        /// </summary>
        [TestVariable("4ed9904b-52fe-4a2c-b6f5-679c897c9cd0")]
        public string varEndDate
        {
            get { return _varEndDate; }
            set { _varEndDate = value; }
        }

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.0")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.0")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'PmiMerchandisingPanel.PanelSideBar'.", repo.PmiMerchandisingPanel.PanelSideBarInfo, new RecordItemIndex(0));
            Validate.Exists(repo.PmiMerchandisingPanel.PanelSideBarInfo);
            Delay.Milliseconds(0);
            
            CustomCodeCollection.CustomCode.findConfirmationDialogBox();
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'PmiMerchandisingPanel.Abnormality' at Center", repo.PmiMerchandisingPanel.AbnormalityInfo, new RecordItemIndex(2));
            repo.PmiMerchandisingPanel.Abnormality.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'PmiMerchandisingPanel.AbnormalityReportList'.", repo.PmiMerchandisingPanel.AbnormalityReportListInfo, new RecordItemIndex(3));
            Validate.Exists(repo.PmiMerchandisingPanel.AbnormalityReportListInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'PmiMerchandisingPanel.AbnormalityReportList' at Center", repo.PmiMerchandisingPanel.AbnormalityReportListInfo, new RecordItemIndex(4));
            repo.PmiMerchandisingPanel.AbnormalityReportList.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating Exists on item 'PmiMerchandisingPanel.MerchandiserVisitForm'.", repo.PmiMerchandisingPanel.MerchandiserVisitFormInfo, new RecordItemIndex(5));
            Validate.Exists(repo.PmiMerchandisingPanel.MerchandiserVisitFormInfo);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'PmiMerchandisingPanel.ReportType' at Center", repo.PmiMerchandisingPanel.ReportTypeInfo, new RecordItemIndex(6));
            repo.PmiMerchandisingPanel.ReportType.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Up}'.", new RecordItemIndex(7));
            Keyboard.Press("{Up}");
            Delay.Milliseconds(900);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Down}'.", new RecordItemIndex(8));
            Keyboard.Press("{Down}");
            Delay.Milliseconds(900);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(9));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(900);
            
            CustomCodeCollection.CustomCode.setDates(varStartDate, varEndDate);
            Delay.Milliseconds(0);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'PmiMerchandisingPanel.LastVisit' at Center", repo.PmiMerchandisingPanel.LastVisitInfo, new RecordItemIndex(11));
            repo.PmiMerchandisingPanel.LastVisit.Touch();
            Delay.Milliseconds(500);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Up}'.", new RecordItemIndex(12));
            Keyboard.Press("{Up}");
            Delay.Milliseconds(900);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Down}'.", new RecordItemIndex(13));
            Keyboard.Press("{Down}");
            Delay.Milliseconds(900);
            
            Report.Log(ReportLevel.Info, "Keyboard", "Key sequence '{Return}'.", new RecordItemIndex(14));
            Keyboard.Press("{Return}");
            Delay.Milliseconds(900);
            
            Report.Log(ReportLevel.Info, "Touch", "Touch item 'PmiMerchandisingPanel.GenerateReportButton' at Center", repo.PmiMerchandisingPanel.GenerateReportButtonInfo, new RecordItemIndex(15));
            repo.PmiMerchandisingPanel.GenerateReportButton.Touch();
            Delay.Milliseconds(10000);
            
        }

#region Image Feature Data
#endregion
    }
#pragma warning restore 0436
}
